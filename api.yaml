openapi: 3.0.0
info:
  description: Planex api
  version: "1.0.0"
  title: Planex api
  termsOfService: 'https://uk.wikipedia.org/wiki/%D0%92%D1%96%D0%BA%D1%96%D0%BF%D0%B5%D0%B4%D1%96%D1%8F'
  contact:
    email: bohdan.koval.kn.2021@lpnu.ua
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: User
    description: Everything about user
  - name: Event
    description: Everything about event
  - name: Task
    description: Everything about task
  - name: Category
    description: Everything about category
paths:
  /User:
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'

  /User/createWithList:
    post:
      tags:
        - User
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /User/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /User/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      security:
        - User_auth:
            - write:users
            - read:users
  /User/{UserId}:
    get:
      tags:
        - User
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - name: UserId
          in: path
          description: 'The name that needs to be fetched. Use 3 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - User_auth:
            - write:users
            - read:users

  /User/{username}:
    get:
      tags:
        - User
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - User_auth:
            - write:users
            - read:users
    put:
      tags:
        - User
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      security:
        - User_auth:
            - write:users
            - read:users
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - User_auth:
            - write:users
            - read:users
  /Event:
    post:
      tags:
        - Event
      summary: Add a new event
      description: Add a new event
      operationId: addEvent
      requestBody:
        description: Create a new Event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '405':
          description: Invalid input
      security:
        - User_auth:
            - write:users
            - read:users
  /Envent/{EventId}:
    get:
      tags:
        - Event
      summary: Get Event by event id
      description: ''
      operationId: getEventById
      parameters:
        - name: EventId
          in: path
          description: 'The name that needs to be fetched. Use 3 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid id supplied
        '404':
          description: Event not found
      security:
        - User_auth:
            - write:users
            - read:users
    delete:
      tags:
        - Event
      summary: Delete event
      description: Delete event
      operationId: deleteEvent
      parameters:
        - name: EventId
          in: path
          description: The EventId that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid EventId supplied
        '404':
          description: Event not found
      security:
        - User_auth:
            - write:users
            - read:users
    put:
      tags:
        - Event
      summary: Update an existing event
      description: Update an existing event by Id
      operationId: updateEvent
      parameters:
        - name: EventId
          in: path
          description: 'The name that needs to be fetched. Use 3 for testing. '
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Course not found
        '405':
          description: Validation exception
      security:
        - User_auth:
            - write:users
            - read:users
  /Task:
    post:
      tags:
        - Task
      summary: Add a new task
      description: Add a new task
      operationId: addTask
      requestBody:
        description: Create a new Task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input
      security:
        - User_auth:
            - write:users
            - read:users
  /Task/{TaskId}:
    get:
      tags:
        - Task
      summary: Get Task by event id
      description: ''
      operationId: getTaskById
      parameters:
        - name: TaskId
          in: path
          description: 'The name that needs to be fetched. Use 3 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid id supplied
        '404':
          description: Task not found
      security:
        - User_auth:
            - write:users
            - read:users


    put:
      tags:
        - Task
      summary: Update an existing Task
      description: Update an existing Task by Id
      operationId: updateTask
      parameters:
        - name: TaskId
          in: path
          description: 'The name that needs to be fetched. Use 3 for testing. '
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '405':
          description: Validation exception
      security:
        - User_auth:
            - write:users
            - read:users
    delete:
      tags:
        - Task
      summary: Delete
      description: Delete task
      operationId: deleteTask
      parameters:
        - name: TaskId
          in: path
          description: The Task that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid TaskId supplied
        '404':
          description: Task not found
      security:
        - User_auth:
            - write:users
            - read:users

  /Category:
    post:
      tags:
        - Category
      summary: Add a new category
      description: Add a new category
      operationId: addCategory
      requestBody:
        description: Create a new Category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category '
        '405':
          description: Invalid input
      security:
        - User_auth:
            - write:users
            - read:users
  /Category/{CategoryId}:
    get:
      tags:
        - Category
      summary: Get Category by category id
      description: ''
      operationId: getCategoryById
      parameters:
        - name: CategoryId
          in: path
          description: 'The name that needs to be fetched. Use 3 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid id supplied
        '404':
          description: Category not found
      security:
        - User_auth:
            - write:users
            - read:users
    delete:
      tags:
        - Category
      summary: Delete category
      description: Delete category
      operationId: deleteCategory
      parameters:
        - name: CategoryId
          in: path
          description: The Category that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid CategoryId supplied
        '404':
          description: Task not found
      security:
        - User_auth:
            - write:users
            - read:users
    put:
      tags:
        - Category
      summary: Update an existing Category
      description: Update an existing  Category by Id
      operationId: updateCategory
      parameters:
        - name: CategoryId
          in: path
          description: 'The name that needs to be fetched. Use 3 for testing. '
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '405':
          description: Validation exception
      security:
        - User_auth:
            - write:users
            - read:users
components:
  schemas:
     User:
       type: object
       properties:
         id:
           type: integer
           format: int64
           example: 10
         login:
           type: string
           example: Example1234
         password:
           type: string
           example: Example_password01
         username:
           type: string
           example: theUser
         email:
           type: string
           example: John
         teamworking:
           type: boolean
           example: false
       xml:
         name: user
     Tag:
       type: object
       properties:
         id:
           type: integer
           format: int64
         name:
           type: string
       xml:
        name: tag
     Event:
       type: object
       properties:
         id:
           type: integer
           format: in64
           example: 10
         start:
           type: string
           example: 10.12.2022 20:30:00
         finish:
           type: string
           example: 11.12.2022 11:00:00
         title:
           type: string
           example: ExampleTitle
         repeat:
           type: string
           example: 12.12.2022 17:00:00
         description:
           type: string
           example: ExampleDescription\
     User_Event:
       type: object
       properties:
         user_id:
           type: integer
           example: 7
         event_id:
           type: integer
           example: 5
     Category:
       type: object
       properties:
         id:
           type: integer
           example: 4
         name:
           type: string
           example: ExampleName
         description:
           type: string
           example: ExampleDescription
         user_id:
           type: integer
           example: 10
     Category_Event:
       type: object
       properties:
         category_id:
           type: integer
           example: 6
         event_id:
           type: integer
           example: 9
     Task:
       type: object
       properties:
         id:
           type: integer
           example: 11
         title:
           type: string
           example: ExampleTitle
         description:
           type: string
           example: ExampleDescription
         deadline:
           type: string
           example: 03.05.2023 00:00:00
         time_to_do:
           type: string
           example: 05:30:00
         repeat:
           type: string
           example: 04.05.2023 15:00:00
         event_id:
           type: integer
           example: 15
         user_id:
           type: integer
           example: 12
     ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    User_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:users: modify students
            read:users: read students
    api_key:
      type: apiKey
      name: api_key
      in: header
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/nulp7/Lab_5/1.0.0